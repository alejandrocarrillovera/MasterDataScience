tipo<-append(tipo,fechas$de[i])
}
}
bic_pil<-function(fechas){
p=0
tipo<-c()
for (i in 1:length(fechas)) {
if(fechas$tipo[i]="Pilates"|fechas$tipo[i]="Cycling"){
p=p+1
tipo<-append(tipo,fechas$de[i])
}
}
print(p)
}
bic_pil<-function(fechas){
p=0
tipo<-c()
for (i in 1:length(fechas)) {
if(fechas$tipo[i]="Pilates"|fechas$tipo[i]="Cycling"){
p=p+1
tipo<-append(tipo,fechas$de[i])
}
}
print(p)
}
bic_pil(fechas)
#8. Encontrar las fechas en las que se ha practicado bicicleta o pilates en Amsterdam en el a?o 2019 SI NO SALE LO QUITAMOS
fechas<-filter(act_new,ciudad=="Europe/Amsterdam")
bic_pil<-function(fechas){
p=0
tipo<-c()
for (i in 1:length(fechas)) {
if(fechas$tipo[i]="Pilates"|fechas$tipo[i]="Cycling"){
p=p+1
tipo<-append(tipo,fechas$de[i])
}
}
print(p)
}
bic_pil<-function(fechas){
p=0
tipo<-c()
for (i in 1:length(fechas)) {
if(fechas$tipo[i]="Pilates"|fechas$tipo[i]="Cycling"){
p=p+1
tipo<-append(tipo,fechas$de[i])}
}
print(p)
}
bic_pil<-function(fechas){
p=0
tipo<-c()
for (i in length(fechas)) {
if (fechas$tipo[i]="Pilates"|fechas$tipo[i]="Cycling")
p=p+1
tipo<-append(tipo,fechas$de[i])
}
}
bic_pil<-function(fechas){
p=0
tipo<-c()
for (i in length(fechas)) {
if (fechas$tipo[i]="Pilates"|fechas$tipo[i]="Cycling"){
p=p+1
tipo<-append(tipo,fechas$de[i])
}
}
}
#B. NOMBRE DE LOS QUE HAN APROBADO EL EXAMEN FINAL A PESAR DE HABER ASISTIDO MENOS DE UN 50% A LAS CLASES
naprobados<-function(calificaciones){
p=0
nombres<-c()
for (i in 1:length(calificaciones)) {
if(calificaciones$Ex..JUNIO.12P[i]>6 & calificaciones$Asistencia..1P[i]<0.5){
p=p+1
nombres<-append(nombres,calificaciones$NOMBRE.ALUMNO[i])
}
}
print(p)
print(as.character(nombres))
}
naprobados(calificaciones)
bic_pil<-function(fechas){
p=0
tipo<-c()
for (i in length(fechas)) {
if (fechas$tipo[i]="Pilates"|fechas$tipo[i]="Cycling"){
p=p+1
tipo<-append(tipo,fechas$de[i])
}
}
print(p)
}
bic_pil<-function(fechas){
p=0
lista<-c()
for (i in 1:length(fechas)) {
if(fechas$tipo[i]="Cycling" | fechas$tipo[i]="Pilates"){
p=p+1
lista<-append(lista, fechas$de[i])
}
}
print(p)
print(as.character(lista))
}
bic_pil<-function(fechas){
p=0
lista<-c()
for (i in 1:length(fechas)) {
if(fechas$tipo[i]="Cycling" | fechas$tipo[i]="Pilates"){
p=p+1
lista<-append(lista, fechas$de[i])
}
}
print(p)
print(as.character(lista))
}
bic_pil<-function(fechas){
p=0
lista<-c()
for (i in 1:length(fechas)) {
if(fechas$tipo[i]=="Cycling" | fechas$tipo[i]=="Pilates"){
p=p+1
lista<-append(lista, fechas$de[i])
}
}
print(p)
print(as.character(lista))
}
bic_pil(fechas)
View(fechas)
View(fechas)
bic_pil<-function(fechas){
p=0
lista<-c()
for (i in 1:length(fechas)) {
if(fechas$tipo[i]=="Cycling" | fechas$tipo[i]=="Pilates"){
p=p+1
lista<-append(lista, fechas$de[i])
}
}
print(p)
print(as.character(lista))
}
bic_pil(fechas)
# 2. Mediante la libreria readr, o mediante los menus de RStudio, leer los datasets sleep.csv  y activities.csv
# ambos archivos deben estar previamente en la carpeta del proyecto creado
library(readr)
library(tidyverse)
library(rmarkdown)
library(dplyr)
activities <- read_csv("activities.csv")
# 3.Comprobar el contenido  con View y contar cuantos NAs hay en la columna GPS del dataset activities
View(act_data)
sum(is.na(activities$GPS))
# 4. Crear un objeto R denominado act_new que contenga solo las variables
# siguientes: 1,2,5-6
act_new<-select(activities,1,2,5,6)
# 5. Renombrar la variable 'Activity type' con el nombre 'tipo' y la variable 'Time zone' como 'ciudad'
act_new<-rename(act_new,tipo='Activity type')
act_new<-rename(act_new,ciudad="Timezone")
# 6. Realizar un recuento de tipo de actividad con summary. Para ello
# debes transformar previamente la variable tipo a factor con as.factor.
# Crea un grafico de barras con dicha variable par visualizar las frecuencias.
# Haz lo mismo para la variable ciudad
act_new$tipo<-as.factor(act_new$tipo)
summary(act_new$tipo)
barplot(summary(act_new$tipo))
#7. Filtrar los registros de act_new que correspondan con ciudad Amsterdam en otro objeto
# y lo mismo con Madrid. Con esos nuevos objetos determina los deportes que
# no se practican en Amsterdam y s? en Madrid y viceversa. Genera graficos para visualizar los resultados
ams<-filter(act_new,ciudad=="Europe/Amsterdam")
ams<-ams[,3:4]
mad<-filter(act_new,ciudad=="Europe/Madrid")
mad<-mad[,3:4]
union<-unique(c(as.character(mad$tipo),as.character(ams$tipo)))
d_mad<-filter(mad,tipo %in% union & tipo %in% mad$tipo & !tipo %in% ams$tipo)
d_ams<-filter(ams,tipo %in% union & tipo %in% ams$tipo & !tipo %in% mad$tipo)
barplot(summary(d_mad$tipo))
barplot(summary(d_ams$tipo))
#8. Encontrar las fechas en las que se ha practicado bicicleta o pilates en Amsterdam en el a?o 2019 SI NO SALE LO QUITAMOS
fechas<-filter(act_new,ciudad=="Europe/Amsterdam")
bic_pil<-function(fechas){
p=0
lista<-c()
for (i in 1:94) {
if(fechas$tipo[i]=="Cycling" | fechas$tipo[i]=="Pilates"){
p=p+1
lista<-append(lista, fechas$de[i])
}
}
print(p)
print(as.character(lista))
}
bic_pil(fechas)
View(fechas)
#9. Crear una nueva variable dif con los minutos de realizaci?n de cada actividad en Amsterdam
# y realizar una representaci?n gr?fica de los resultados con plot y determinar que deporte o deportes
# se han practicado durante dos horas o mas !!!MUTATE!!!
act_new<-mutate(act_new,
dif = act_new$a - act_new$de)
View(act_new)
ggplot(summary(act_new$dif))
ggplot(act_new$dif)
barplot(act_new$dif)
barplot(summary(act_new$dif))
#10. Guardar el nuevo dataset en un archivo llamado  "act_new.csv"
write.csv(act_new, file = "act_new.csv", row.names = FALSE)
select(act_new,
act_new$dif>= 120)
filter(act_new,
dif >= 120)
View(act_new)
filter(act_new,
dif >= 120,
tipo)
filter(act_new,
dif >= 120)
select(filter(act_new,
dif >= 120),tipo)
barplot(summary(act_new$dif))
barplot(act_new$dif)
select(filter(act_new,
dif >= 120),tipo)
#10. Guardar el nuevo dataset en un archivo llamado  "act_new.csv"
write.csv(act_new, file = "act_new.csv", row.names = FALSE)
#-------------------------------
#-----SEGUNDA PARTE-------------
# 11. Cargar el dataset sleep en un objeto llamado sleep
sleep <- read_csv("sleep.csv")
# 2. Mediante la libreria readr, o mediante los menus de RStudio, leer los datasets sleep.csv  y activities.csv
# ambos archivos deben estar previamente en la carpeta del proyecto creado
library(readr)
library(tidyverse)
library(rmarkdown)
library(dplyr)
#-------------------------------
#-----SEGUNDA PARTE-------------
# 11. Cargar el dataset sleep en un objeto llamado sleep
sleep <- read_csv("sleep.csv")
View(sleep)
View(sleep)
# 2. Mediante la libreria readr, o mediante los menus de RStudio, leer los datasets sleep.csv  y activities.csv
# ambos archivos deben estar previamente en la carpeta del proyecto creado
library(readr)
library(tidyverse)
library(rmarkdown)
library(dplyr)
activities <- read_csv("activities.csv")
# 3.Comprobar el contenido  con View y contar cuantos NAs hay en la columna GPS del dataset activities
View(act_data)
sum(is.na(activities$GPS))
# 4. Crear un objeto R denominado act_new que contenga solo las variables
# siguientes: 1,2,5-6
act_new<-select(activities,1,2,5,6)
# 5. Renombrar la variable 'Activity type' con el nombre 'tipo' y la variable 'Time zone' como 'ciudad'
act_new<-rename(act_new,tipo='Activity type')
act_new<-rename(act_new,ciudad="Timezone")
# 6. Realizar un recuento de tipo de actividad con summary. Para ello
# debes transformar previamente la variable tipo a factor con as.factor.
# Crea un grafico de barras con dicha variable par visualizar las frecuencias.
# Haz lo mismo para la variable ciudad
act_new$tipo<-as.factor(act_new$tipo)
summary(act_new$tipo)
barplot(summary(act_new$tipo))
#7. Filtrar los registros de act_new que correspondan con ciudad Amsterdam en otro objeto
# y lo mismo con Madrid. Con esos nuevos objetos determina los deportes que
# no se practican en Amsterdam y s? en Madrid y viceversa. Genera graficos para visualizar los resultados
ams<-filter(act_new,ciudad=="Europe/Amsterdam")
ams<-ams[,3:4]
mad<-filter(act_new,ciudad=="Europe/Madrid")
mad<-mad[,3:4]
union<-unique(c(as.character(mad$tipo),as.character(ams$tipo)))
d_mad<-filter(mad,tipo %in% union & tipo %in% mad$tipo & !tipo %in% ams$tipo)
d_ams<-filter(ams,tipo %in% union & tipo %in% ams$tipo & !tipo %in% mad$tipo)
barplot(summary(d_mad$tipo))
barplot(summary(d_ams$tipo))
#8. Encontrar las fechas en las que se ha practicado bicicleta o pilates en Amsterdam en el a?o 2019 SI NO SALE LO QUITAMOS
fechas<-filter(act_new,ciudad=="Europe/Amsterdam")
bic_pil<-function(fechas){
p=0
lista<-c()
for (i in 1:94) {
if(fechas$tipo[i]=="Cycling" | fechas$tipo[i]=="Pilates"){
p=p+1
lista<-append(lista, fechas$de[i])
}
}
print(p)
print(as.character(lista))
}
bic_pil(fechas)
#9. Crear una nueva variable dif con los minutos de realizaci?n de cada actividad en Amsterdam
# y realizar una representaci?n gr?fica de los resultados con plot y determinar que deporte o deportes
# se han practicado durante dos horas o mas
act_new<-mutate(act_new,
dif = act_new$a - act_new$de)
barplot(act_new$dif)
#9. Crear una nueva variable dif con los minutos de realizaci?n de cada actividad en Amsterdam
# y realizar una representaci?n gr?fica de los resultados con plot y determinar que deporte o deportes
# se han practicado durante dos horas o mas
act_new<-mutate(act_new,
dif = act_new$a - act_new$de)
barplot(act_new$dif)
select(filter(act_new,
dif >= 120),tipo)
#10. Guardar el nuevo dataset en un archivo llamado  "act_new.csv"
write.csv(act_new, file = "act_new.csv", row.names = FALSE)
#-------------------------------
#-----SEGUNDA PARTE-------------
# 11. Cargar el dataset sleep en un objeto llamado sleep
sleep <- read_csv("sleep.csv")
#12. crear un nuevo data set llamado sleep_new que contenga solo las variables
#que contengan informaci?n, que no sean todo cero.
sleep_new<-
#13. Renombrar las variables de sleep_new a nombres cortos:
sleep_new<-rename(sleep_new,lig='ligero')
#12. crear un nuevo data set llamado sleep_new que contenga solo las variables
#que contengan informaci?n, que no sean todo cero.
sleep_new<-select(sleep,1:9-5)
#12. crear un nuevo data set llamado sleep_new que contenga solo las variables
#que contengan informaci?n, que no sean todo cero.
sleep_new<-select(sleep,1:9,-5)
View(sleep_new)
#13. Renombrar las variables de sleep_new a nombres cortos:
sleep_new<-rename(sleep_new,lig='ligero')
View(sleep)
View(sleep_new)
View(sleep)
#12. crear un nuevo data set llamado sleep_new que contenga solo las variables
#que contengan informaci?n, que no sean todo cero.
sleep_new<-select(sleep,1:10,-5)
View(sleep_new)
#13. Renombrar las variables de sleep_new a nombres cortos:
sleep_new<-rename(sleep_new,lig='ligero (s)')
sleep_new<-rename(sleep_new,pro='profundo (s)')
sleep_new<-rename(sleep_new,des='despierto (s)')
sleep_new<-rename(sleep_new,desp='despertar')
sleep_new<-rename(sleep_new,dur='Duration to sleep (s)')
sleep_new<-rename(sleep_new,lig='Duration to wake up (s)')
sleep_new<-rename(sleep_new,lig='Snoring (s)')
View(sleep_new)
#13. Renombrar las variables de sleep_new a nombres cortos:
sleep_new<-rename(sleep_new,lig='ligero (s)')
sleep_new<-rename(sleep_new,pro='profundo (s)')
sleep_new<-rename(sleep_new,des='despierto (s)')
sleep_new<-rename(sleep_new,desp='despertar')
sleep_new<-rename(sleep_new,durs='Duration to sleep (s)')
sleep_new<-rename(sleep_new,durw='Duration to wake up (s)')
sleep_new<-rename(sleep_new,sno='Snoring (s)')
#12. crear un nuevo data set llamado sleep_new que contenga solo las variables
#que contengan informaci?n, que no sean todo cero.
sleep_new<-select(sleep,1:10,-5)
#13. Renombrar las variables de sleep_new a nombres cortos:
sleep_new<-rename(sleep_new,lig='ligero (s)')
sleep_new<-rename(sleep_new,pro='profundo (s)')
sleep_new<-rename(sleep_new,des='despierto (s)')
sleep_new<-rename(sleep_new,desp='despertar')
sleep_new<-rename(sleep_new,durs='Duration to sleep (s)')
sleep_new<-rename(sleep_new,durw='Duration to wake up (s)')
sleep_new<-rename(sleep_new,sno='Snoring (s)')
View(sleep_new)
# 15. Calcular cuanto tiempo en total se ha dormido cada noche: ligero+profundo
mutate(sleep_new,
ttotal = lig + pro)
View(sleep_new)
View(sleep)
# 15. Calcular cuanto tiempo en total se ha dormido cada noche: ligero+profundo
mutate(sleep_new,
ttotal = (lig + pro)/60)
# 15. Calcular cuanto tiempo en total se ha dormido cada noche: ligero+profundo
mutate(sleep_new,
ttotal = (lig + pro)/60)
View(sleep_new)
View(sleep_new)
#14. Eliminar todas las filas que contengan alg?n NA
sleep_new<-na.omit(sleep_new)
# 15. Calcular cuanto tiempo en total se ha dormido cada noche: ligero+profundo
sleep_new<-mutate(sleep_new,
ttotal = (lig + pro)/60)
View(sleep_new)
# 16. Visualizacion de la relacion ligero-profundo-total
# A la vista de los resultados, que tipo de sue?o es mas relevante?
ggplot2(sleep_new, lig/pro)#3 gradicos LIGERO-PROFUNDO,LIGERO-TOTAL,PROFUNDO-TOTAL
# 16. Visualizacion de la relacion ligero-profundo-total
# A la vista de los resultados, que tipo de sue?o es mas relevante?
ggplot(sleep_new, lig/pro)#3 gradicos LIGERO-PROFUNDO,LIGERO-TOTAL,PROFUNDO-TOTAL
# 16. Visualizacion de la relacion ligero-profundo-total
# A la vista de los resultados, que tipo de sue?o es mas relevante?
ggplot(sleep_new, sleep_new$lig/sleep_new$pro)#3 gradicos LIGERO-PROFUNDO,LIGERO-TOTAL,PROFUNDO-TOTAL
# 16. Visualizacion de la relacion ligero-profundo-total
# A la vista de los resultados, que tipo de sue?o es mas relevante?
ggplot(sleep_new, sleep_new$lig/sleep_new$pro, mapping = aes())#3 gradicos LIGERO-PROFUNDO,LIGERO-TOTAL,PROFUNDO-TOTAL
# 16. Visualizacion de la relacion ligero-profundo-total
# A la vista de los resultados, que tipo de sue?o es mas relevante?
plot(sleep_new, sleep_new$lig/sleep_new$pro)#3 gradicos LIGERO-PROFUNDO,LIGERO-TOTAL,PROFUNDO-TOTAL
# 16. Visualizacion de la relacion ligero-profundo-total
# A la vista de los resultados, que tipo de sue?o es mas relevante?
plot(sleep_new$lig/sleep_new$pro)#3 gradicos LIGERO-PROFUNDO,LIGERO-TOTAL,PROFUNDO-TOTAL
plot(sleep_new$ttotal/sleep_new$lig)
plot(sleep_new$ttotal/sleep_new$pro)
View(sleep_new)
ttotal = (lig + pro)
# 16. Visualizacion de la relacion ligero-profundo-total
# A la vista de los resultados, que tipo de sue?o es mas relevante?
plot(sleep_new$lig/sleep_new$pro)#3 gradicos LIGERO-PROFUNDO,LIGERO-TOTAL,PROFUNDO-TOTAL
plot(sleep_new$ttotal/sleep_new$lig)
plot(sleep_new$ttotal/sleep_new$pro)
# 15. Calcular cuanto tiempo en total se ha dormido cada noche: ligero+profundo
sleep_new<-mutate(sleep_new,
# 16. Visualizacion de la relacion ligero-profundo-total
# A la vista de los resultados, que tipo de sue?o es mas relevante?
plot(sleep_new$lig/sleep_new$pro)#3 gradicos LIGERO-PROFUNDO,LIGERO-TOTAL,PROFUNDO-TOTAL
plot(sleep_new$ttotal/sleep_new$lig)
plot(sleep_new$ttotal/sleep_new$lig)
plot(sleep_new$ttotal/sleep_new$pro)
View(sleep_new)
#14. Eliminar todas las filas que contengan alg?n NA
sleep_new<-na.omit(sleep_new)
# 15. Calcular cuanto tiempo en total se ha dormido cada noche: ligero+profundo
sleep_new<-mutate(sleep_new,
#-------------------------------
#-----SEGUNDA PARTE-------------
# 11. Cargar el dataset sleep en un objeto llamado sleep
sleep <- read_csv("sleep.csv")
#12. crear un nuevo data set llamado sleep_new que contenga solo las variables
#que contengan informaci?n, que no sean todo cero.
sleep_new<-select(sleep,1:10,-5)
#13. Renombrar las variables de sleep_new a nombres cortos:
sleep_new<-rename(sleep_new,lig='ligero (s)')
sleep_new<-rename(sleep_new,pro='profundo (s)')
sleep_new<-rename(sleep_new,des='despierto (s)')
sleep_new<-rename(sleep_new,desp='despertar')
sleep_new<-rename(sleep_new,durs='Duration to sleep (s)')
sleep_new<-rename(sleep_new,durw='Duration to wake up (s)')
sleep_new<-rename(sleep_new,sno='Snoring (s)')
#14. Eliminar todas las filas que contengan alg?n NA
sleep_new<-na.omit(sleep_new)
# 15. Calcular cuanto tiempo en total se ha dormido cada noche: ligero+profundo
sleep_new<-mutate(sleep_new,
# 15. Calcular cuanto tiempo en total se ha dormido cada noche: ligero+profundo
sleep_new<-mutate(sleep_new,
ttotal = lig + pro)
View(sleep_new)
View(sleep_new)
# 15. Calcular cuanto tiempo en total se ha dormido cada noche: ligero+profundo
sleep_new<-mutate(sleep_new,
ttotal = lig + pro)
View(sleep_new)
# 16. Visualizacion de la relacion ligero-profundo-total
# A la vista de los resultados, que tipo de sue?o es mas relevante?
plot(sleep_new$lig/sleep_new$pro)
plot(sleep_new$ttotal/sleep_new$lig)
plot(sleep_new$ttotal/sleep_new$pro)
View(sleep_new)
# 17. Realizar un analisis de diferencias entre los dos tipos de sue?o e interpretar los resultados
# usar la funci?n ICalpha o el 'One sample t-test' de TeachingDemos: t.test()
ICalpha <- function(MA,MB,alfa=0.05){
n <- length(MA)
dif <- MA-MB
meddif <- mean(dif)
s <- sqrt(var(dif))
t <- qt(alfa/2,n-1,lower.tail = FALSE)
valor<- t*s/sqrt(n)
cinf <- meddif-valor
csup <- meddif+valor
resultado <- data.frame(cinf,csup)
return(resultado)
}
ICalpha()
ICalpha(MA,MB)
ICalpha(sleep_new$lig,sleep_new$pro)
plot(sleep_new$lig,sleep_new$pro)
#Contraste de hipotesis de diferencia de medias
#Planteo:
#H0:media de sueño ligero - media de sueño profundo = 0
#H1:media de sueño liguero - media de sueño profundo != 0
#Con un nivel de confianza del 95%
#Si aceptamos H0 diriamos que no hay diferencia de medias
#Si aceptamos H1 diriamos que si hay diferencia de medias
ICalpha(sleep_new$lig,sleep_new$pro)
#18. Crear una nueva variable 'ciudad' en sleep_new con la informacion de act_new.
#Crearla como factor hacer un for y si la fecha coincide que ponga donde estaba
fecha<- substr(act_new$de, 1, 10)
act_new$fecha <- as.factor(fecha)
fecha<- substr(act_new$de, 1, 10)
act_new$fecha <- as.factor(fecha)
fecha<- substr(sleep_new$de, 1, 10)
sleep_new$fecha <- as.factor(fecha)
act_new<- select(act_new,-de,-a)
sleep_new<- select(sleep_new,-de,-a)
act_new<-act_new %>%
group_by(fecha,ciudad) %>%
summarize(count=sum(dif))
sleep_new<- inner_join(act_new,sleep_new)
#19. Representar la relaci?n totalsleep y profundo usando como facetas el factor ciudad
#como factor
sleep_new<-sleep_new %>%
group_by(ciudad) %>%
summarize(pro - sum(pro))
#19. Representar la relaci?n totalsleep y profundo usando como facetas el factor ciudad
#como factor
sleep_new<-sleep_new %>%
group_by(ciudad) %>%
summarize(pro - sum(pro), total = sum(ttotal))
#19. Representar la relaci?n totalsleep y profundo usando como facetas el factor ciudad
#como factor
sleep_new<-sleep_new %>%
group_by(ciudad) %>%
summarize(pro - sum(pro), total = sum(ttotal))
#20. Guardar el dataset sleep_new en un archivo "sleep_new.csv"
write.csv(sleep_new, file = "sleep_new.csv", row.names = FALSE)
