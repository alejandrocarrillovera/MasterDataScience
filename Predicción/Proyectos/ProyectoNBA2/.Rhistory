aes(x = Predictores, y = R2_ajustado)) +
geom_line() +
geom_point()
p <- p + geom_point(aes(
x = Predictores[which.max(summary(mejores_mod)$adjr2)],
y = R2_ajustado[which.max(summary(mejores_mod)$adjr2)]),
colour = "red", size = 3)
p <- p +  scale_x_continuous(breaks = c(0:24)) +
theme_bw() +
labs(title = 'R2 ajustado',
x =  'nº predictores')
p
p
p
p
#Dibujamos el R2 ajustado y vemos que como nos había mostrado antes, el mayor valor es en el predictor 12
p <- ggplot(data = data.frame(Predictores = 1:25,
R2_ajustado = summary(mejores_mod)$adjr2),
aes(x = Predictores, y = R2_ajustado)) +
geom_line() +
geom_point()
p <- p + geom_point(aes(
x = Predictores[which.max(summary(mejores_mod)$adjr2)],
y = R2_ajustado[which.max(summary(mejores_mod)$adjr2)]),
colour = "red", size = 3)
p <- p +  scale_x_continuous(breaks = c(0:24)) +
theme_bw() +
labs(title = 'R2 ajustado',
x =  'nº predictores')
p
which.min(Error_val)
sqrt(Error_val[2])
Error_val
set.seed(250)
train <- sample(x = 1:483, size = 97, replace = FALSE)
mejor_mod <- regsubsets(Salary~.-Player-NBA_Country-Tm, data = nba[train,], nvmax = 25, method = "backward")
mejor_mod
Error_val <- rep(NA, 24)
test_matrix <- model.matrix(Salary~.-Player-NBA_Country-Tm, data = nba[-train, ])
for (i in 1:24) {
coeficientes <- coef(object = mejor_mod, id = i)
predictores <- test_matrix[, names(coeficientes)]
predicciones <- predictores %*% coeficientes
Error_val[i] <- mean((nba$Salary[-train] - predicciones)^2)
}
which.min(Error_val)
sqrt(Error_val[2])
Error_val
q <- ggplot(data = data.frame(n_predictores = 1:24,
Estimacion_MSE = Error_val),
aes(x = n_predictores, y = Estimacion_MSE)) +
geom_line() +
geom_point()
q <- q + geom_point(aes(x = n_predictores[which.min(Error_val)],
y = Error_val[which.min(Error_val)]),
colour = "red", size = 3)
q <- q +  scale_x_continuous(breaks = c(0:24)) +
theme_bw() +
labs(title = 'validation MSE',
x =  'nº predictores')
q
set.seed
set.seed
set.seed(250)
train <- sample(x = 1:483, size = 97, replace = FALSE)
mejor_mod <- regsubsets(Salary~.-Player-NBA_Country-Tm, data = nba[train,], nvmax = 25, method = "backward")
mejor_mod
Error_val <- rep(NA, 24)
test_matrix <- model.matrix(Salary~.-Player-NBA_Country-Tm, data = nba[-train, ])
for (i in 1:24) {
coeficientes <- coef(object = mejor_mod, id = i)
predictores <- test_matrix[, names(coeficientes)]
predicciones <- predictores %*% coeficientes
Error_val[i] <- mean((nba$Salary[-train] - predicciones)^2)
}
which.min(Error_val)
sqrt(Error_val[2])
Error_val
sqrt(2.732014e+13)
plot(cv_lasso, xvar = "lambda", label = TRUE)
P0 <- Pn * (Mun/Lan)
print(a)
Probabilidad <- function (n) {
la <- 6
mu <- 2
a <- 0
for (i in (1:9)) {
if (i <=5) {
a <- a + (((la/mu)^i)/factorial(i))
}
else (i>5){
a <- a + (((la/mu)^i)/(factorial(5)*5^(i-5)))
}
}
return(a)
}
Probabilidad <- function (n) {
la <- 6
mu <- 2
a <- 0
for (i in (1:9)) {
if (i <=5) {
a <- a + (((la/mu)^i)/factorial(i))
}
else (i>5){
a <- a + (((la/mu)^i)/(factorial(5)*5^(i-5)))
}
}
return(a)
}
Probabilidad <- function (n) {
la <- 6
mu <- 2
a <- 0
for (i in (1:9)) {
if (i <=5) {
a <- a + (((la/mu)^i)/factorial(i))
}
else (i>5){
a <- a + (((la/mu)^i)/(factorial(5)*5^(i-5)))
}
}
return(a)
la <- 6
mu <- 2
a <- 0
for (i in (1:9)) {
if (i <=5) {
a <- a + (((la/mu)^i)/factorial(i))
}
else (i>5){
a <- a + (((la/mu)^i)/(factorial(5)*5^(i-5)))
}
}
a
for (i in (1:9)) {
if (i <=5) {
a <- a + (((la/mu)^i)/factorial(i))
}
else (i>5){
a <- a + (((la/mu)^i)/(factorial(5)*5^(i-5)))
}
}
for (i in 1:9) {
if (i <=5) {
a <- a + (((la/mu)^i)/factorial(i))
}
else (i>5){
a <- a + (((la/mu)^i)/(factorial(5)*5^(i-5)))
}
}
for (i in (1:9)) {
if (i <=5) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(5)*5^(i-5)))
}
}
a
Probabilidad <- function (n) {
la <- 6
mu <- 2
a <- 0
for (i in (1:9)) {
if (i <=5) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(5)*5^(i-5)))
}
}
return(a)
Probabilidad <- function (n) {
la <- 6
mu <- 2
a <- 0
for (i in (1:9)) {
if (i <=5) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(5)*5^(i-5)))
}
}
return(a)
}
Probabilidad <- function (n) {
la <- 6
mu <- 2
a <- 0
for (i in (1:9)) {
if (i <=5) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(5)*5^(i-5)))
}
}
return(a)
}
Probabilidad()
Probabilidad <- function (n) {
la <- 6
mu <- 2
a <- 0
for (i in (1:9)) {
if (i <=5) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(5)*5^(i-5)))
}
}
return(1/(1+a))
}
Probabilidad()
Probabilidad <- function (n) {
la <- 6
mu <- 2
a <- 0
for (i in (1:9)) {
if (i <=5) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(5)*5^(i-5)))
}
}
if (n <=5){
return(((la/mu)^n)/factorial(n))
}
}
Probabilidad(5)
Probabilidad <- function (n) {
la <- 6
mu <- 2
a <- 0
for (i in (1:9)) {
if (i <=5) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(5)*5^(i-5)))
}
}
if (n <=5){
return((((la/mu)^n)/factorial(n))*a)
}
}
Probabilidad(5)
Probabilidad <- function (n) {
la <- 6
mu <- 2
a <- 0
for (i in (1:9)) {
if (i <=5) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(5)*5^(i-5)))
}
}
p0 <- 1/(1+a)
if (n <=5){
return((((la/mu)^n)/factorial(n))*p0)
}
}
Probabilidad(5)
Probabilidad <- function (n,c) {
la <- 6
mu <- 2
a <- 0
c <- 5
for (i in (1:9)) {
if (i <=c) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(c)*c^(i-c)))
}
}
p0 <- 1/(1+a)
if (n <=c){
return((((la/mu)^n)/factorial(n))*p0)
}
}
Probabilidad(3,5)
Probabilidad <- function (n,c, e) {
la <- 6
mu <- 2
a <- 0
for (i in (1:(c+e))) {
if (i <=c) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(c)*c^(i-c)))
}
}
p0 <- 1/(1+a)
if (n <=c){
return((((la/mu)^n)/factorial(n))*p0)
}
}
Probabilidad(3,5,3)
Probabilidad(0,5,3)
for(i in 0:8) {
print(Probabilidad(i,5,3))
}
Probabilidad(6,5,3)
Probabilidad(6,5,3)
Probabilidad <- function (n,c,e) {
la <- 6
mu <- 2
a <- 0
for (i in (1:(c+e))) {
if (i <=c) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(c)*c^(i-c)))
}
}
p0 <- 1/(1+a)
if (n <=c){
return((((la/mu)^n)/factorial(n))*p0)
}
else {
return(((la/mu)^n)/(factorial(c)*c^(n-c))*p0)
}
}
Probabilidad(6,5,3)
for(i in 0:8) {
print(Probabilidad(i,5,3))
}
Probabilidad_todos <- for(i in 0:8) {
print(Probabilidad(i,5,3))
}
print(c(Probabilidad(i,5,3)))
Probabilidad_todos <- for(i in 0:8) {
print(c(Probabilidad(i,5,3)))
}
Probabilidad_todos <- for(i in 0:8) {
return(c(Probabilidad(i,5,3)))
}
Probabilidad()
Probabilidad <- function (n,c,e) {
la <- 6
mu <- 2
a <- 0
for (i in (1:(c+e))) {
if (i <=c) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(c)*c^(i-c)))
}
}
p0 <- 1/(1+a)
if (n <=c){
return((((la/mu)^n)/factorial(n))*p0)
}
else {
return(((la/mu)^n)/(factorial(c)*c^(n-c))*p0)
}
}
Probabilidad(6,5,3)
Probabilidad_todos <-for(i in 0:8) {
print(Probabilidad(i,5,3))
}
Probabilidad <- function (n,c,e) {
la <- 6
mu <- 2
a <- 0
for (i in (1:(c+e))) {
if (i <=c) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(c)*c^(i-c)))
}
}
p0 <- 1/(1+a)
if (n <=c){
return((((la/mu)^n)/factorial(n))*p0)
}
else {
return(((la/mu)^n)/(factorial(c)*c^(n-c))*p0)
}
}
Probabilidad(6,5,3)
Probabilidad_todos <-for(i in 0:8) {
print(Probabilidad(i,5,3))
}
library(queueing)
install.packages("queueing")
library(queueing)
modelo1 <- NewInput.MMC(lambda = 6, mu = 2, c = 5, n = 0)
CheckInput(modelo1)
modelo_servidor2 <- QueueingModel(modelo1)
summary(modelo_servidor2)
library(queueing)
Probabilidad <- function (n,c,e) {
la <- 6
mu <- 2
a <- 0
for (i in (1:(c+e))) {
if (i <=c) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(c)*c^(i-c)))
}
}
p0 <- 1/(1+a)
if (n <=c){
return((((la/mu)^n)/factorial(n))*p0)
}
else {
return(((la/mu)^n)/(factorial(c)*c^(n-c))*p0)
}
}
Probabilidad_todos <-for(i in 0:8) {
print(Probabilidad(i,5,3))
}
Probabilidad()
modelo1 <- NewInput.MMC(lambda = 6, mu = 2, c = 5, n = 0)
CheckInput(modelo1)
modelo_servidor2 <- QueueingModel(modelo1)
summary(modelo_servidor2)
library(queueing)
Probabilidad <- function (n,c,e) {
la <- 6
mu <- 2
a <- 0
for (i in (1:(c+e))) {
if (i <=c) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(c)*c^(i-c)))
}
}
p0 <- 1/(1+a)
if (n <=c){
return((((la/mu)^n)/factorial(n))*p0)
}
else {
return(((la/mu)^n)/(factorial(c)*c^(n-c))*p0)
}
}
Probabilidad_todos <-for(i in 0:8) {
print(Probabilidad(i,5,3))
}
Probabilidad()
library(queueing)
Probabilidad <- function (n,c,e) {
la <- 6
mu <- 2
a <- 0
for (i in (1:(c+e))) {
if (i <=c) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(c)*c^(i-c)))
}
}
p0 <- 1/(1+a)
if (n <=c){
return((((la/mu)^n)/factorial(n))*p0)
}
else {
return(((la/mu)^n)/(factorial(c)*c^(n-c))*p0)
}
}
Probabilidad_todos <-for(i in 0:8) {
print(Probabilidad(i,5,3))
}
Probabilidad(8,5,3)
modelo1 <- NewInput.MMC(lambda = 6, mu = 2, c = 5, n = 0)
Probabilidad_todos <-for(i in 0:8) {
print(Probabilidad(i,5,3))
}
modelo1 <- NewInput.MMC(lambda = 6, mu = 2, c = 5, n = 0)
CheckInput(modelo1)
modelo_servidor2 <- QueueingModel(modelo1)
summary(modelo_servidor2)
Probabilidad <- function (n,c,e) {
la <- 6
mu <- 2
a <- 0
for (i in (1:(c+e))) {
if (i <=c) {
a <- a + (((la/mu)^i)/factorial(i))
}
else{
a <- a + (((la/mu)^i)/(factorial(c)*c^(i-c)))
}
}
p0 <- 1/(1+a)
if (n <=c){
return((((la/mu)^n)/factorial(n))*p0)
}
else {
return(((la/mu)^n)/(factorial(c)*c^(n-c))*p0)
}
}
Probabilidad_todos <-for(i in 0:8) {
print(Probabilidad(i,5,3))
}
